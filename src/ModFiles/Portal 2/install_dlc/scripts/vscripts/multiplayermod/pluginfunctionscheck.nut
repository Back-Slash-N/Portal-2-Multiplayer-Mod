//---------------------------------------------------
//         *****!Do not edit this file!*****
//---------------------------------------------------
// Purpose: If the plugin isn't loaded or some broke
// over new updates, then we check and redefine each
//              function individually.
//---------------------------------------------------

// Bad way to check, but what else can we do?
if (Entities.FindByName(null, "p2mm_servercommand")){
    // Primary check in case the script attempts to execute midgame and it already has
    printlP2MM(1, false, "pluginfunctionscheck.nut has already ran and is attempting to run again! Suppressing...")
    return
} else {
    // Create a global point_servercommand entity for us to pass through commands
    Entities.CreateByClassname("point_servercommand").__KeyValueFromString("targetname", "p2mm_servercommand")
}

//---------------------------------------------------

// HANDLED THROUGH THE PLUGIN
try {
    if (   printlP2MMLoaded
        && GetPlayerNameLoaded
        && GetSteamIDLoaded
        && GetPlayerIndexLoaded
        && IsMapValidLoaded
        && GetDeveloperLevelP2MMLoaded
        && SetPhysTypeConvarLoaded
        && SetMaxPortalSeparationConvarLoaded
        && IsDedicatedServerLoaded
        && InitializeEntityLoaded
        && SendToChatLoaded
        && GetGameDirectoryLoaded
        && GetLastMapLoaded
        && FirstRunStateLoaded
        && CallFirstRunPromptLoaded
        ) {
        // Everything loaded properly, no need to even go through the checks
        PluginLoaded <- true
        printlP2MM(0, true, "Plugin and its VScript functions detected successfully!\n")
        return
    }
} catch (exception) {
    printl("(P2:MM VSCRIPT): VScript functions were not all detected!")
    printl("Problem function: " + exception + "\n")
}

//---------------------------------------------------

// Check if all plugin defined VScript functions exist

printlP2MMLoaded                    <- false
GetPlayerNameLoaded                 <- false
GetSteamIDLoaded                    <- false
GetPlayerIndexLoaded                <- false
IsMapValidLoaded                    <- false
GetDeveloperLevelP2MMLoaded         <- false
SetPhysTypeConvarLoaded             <- false
SetMaxPortalSeparationConvarLoaded  <- false
IsDedicatedServerLoaded             <- false
InitializeEntityLoaded              <- false
SendToChatLoaded                    <- false
GetGameDirectoryLoaded              <- false
GetLastMapLoaded                    <- false
FirstRunStateLoaded                 <- false
CallFirstRunPromptLoaded            <- false

function RedefinedMessage(functionname) {
    printlP2MM(1, false, "- " + functionname + "() failed to load and has been redefined!\n")
}

local ReplaceprintlP2MM = function() {
    // Does the function exist?
    if ("printlP2MM" in this) {
        printlP2MMLoaded <- true
        return
    }
    // Redefine
    function printlP2MM(level, dev, msg) {
        if (dev && !GetDeveloperLevelP2MM()) {
            return
        }
        printl("(P2:MM VSCRIPT): " + msg)
    }
    RedefinedMessage("printlP2MM")
}

local ReplaceGetPlayerName = function() {
    // Does the function exist?
    if ("GetPlayerName" in this) {
        GetPlayerNameLoaded <- true
        return
    }
    // Redefine
    function GetPlayerName(entinx) {
        return "player" + entinx
    }
    RedefinedMessage("GetPlayerName")
}

local ReplaceGetSteamID = function() {
    if ("GetSteamID" in this) {
        GetSteamIDLoaded <- true
        return
    }
    function GetSteamID(string) {
        return -1
    }
    RedefinedMessage("GetSteamID")
}

local ReplaceGetPlayerIndex = function() {
    if ("GetPlayerIndex" in this) {
        GetPlayerIndexLoaded <- true
        return
    }
    function GetPlayerIndex(int) {
        printlP2MM(1, false, "Plugin not loaded. Unable to grab a players index with their userid!")
    }
    RedefinedMessage("GetPlayerIndex")
}

local ReplaceIsMapValid = function() {
    if ("IsMapValid" in this) {
        IsMapValidLoaded <- true
        return
    }
    function IsMapValid(string) {
        return true // We've been cornered, so we flip a coin :(
    }
    RedefinedMessage("IsMapValid")
}

local ReplaceGetDeveloperLevelP2MM = function() {
    if ("GetDeveloperLevelP2MM" in this) {
        GetDeveloperLevelP2MMLoaded <- true
        return
    }
    function GetDeveloperLevelP2MM() {
        return GetDeveloperLevel() // return the integer of the next best type
    }
    RedefinedMessage("GetDeveloperLevelP2MM")
}

local ReplaceSetPhysTypeConvar = function() {
    if ("SetPhysTypeConvar" in this) {
        SetPhysTypeConvarLoaded <- true
        return
    }
    function SetPhysTypeConvar(string) {
        printlP2MM(1, false, "Plugin not loaded. Unable to change game grab controllers!")
    }
    RedefinedMessage("SetPhysTypeConvar")
}

local ReplaceSetMaxPortalSeparationConvar = function() {
    if ("SetMaxPortalSeparationConvar" in this) {
        SetMaxPortalSeparationConvarLoaded <- true
        return
    }
    function SetMaxPortalSeparationConvar(string) {
        printlP2MM(1, false, "Plugin not loaded. Unable to change player collision amounts!")
    }
    RedefinedMessage("SetMaxPortalSeparationConvar")
}

local ReplaceIsDedicatedServer = function() {
    if ("IsDedicatedServer" in this) {
        IsDedicatedServerLoaded <- true
        return
    }
    function IsDedicatedServer() {
        return false // We've been cornered, so we assume the most likely value :(
    }
    RedefinedMessage("IsDedicatedServer")
}

local ReplaceInitializeEntity = function() {
    if ("InitializeEntity" in this) {
        InitializeEntityLoaded <- true
        return
    }
    function InitializeEntity() {
        return null // This function isnt really used, so this might just not work.
    }
    RedefinedMessage("InitializeEntity")
}

local ReplaceSendToChat = function() {
    if ("SendToChat" in this) {
        SendToChatLoaded <- true
        return
    }
    function SendToChat(message, pActivatorAndCaller = null) {
        // Try to use server command in the case of dedicated servers
        local pEntity = Entities.FindByName(null, "p2mm_servercommand")
        if (pActivatorAndCaller != null) {
            // Send messages from a specific client
            pEntity = p2mm_clientcommand
        }
        EntFireByHandle(pEntity, "command", "say " + message, 0, pActivatorAndCaller, pActivatorAndCaller)
    }
    RedefinedMessage("SendToChat")
}

local ReplaceGetGameDirectory = function() {
    if ("GetGameDirectory" in this) {
        GetGameDirectoryLoaded <- true
        return
    }
    function GetGameDirectory() {
        return "portal2"
    }
    RedefinedMessage("GetGameDirectory")
}

local ReplaceGetLastMap = function() {
    if ("GetLastMap" in this) {
        GetLastMapLoaded <- true
        return
    }
    function GetLastMap() {
        return GetMapName() // Hands are tied, we can only get the current map.
    }
    RedefinedMessage("GetLastMap")
}

local ReplaceFirstRunState = function() {
    if ("FirstRunState" in this) {
        FirstRunStateLoaded <- true
        return
    }
    function FirstRunState(state = null) {
        return false // Once again hands are tied, will screw up stuff.
    }
    RedefinedMessage("FirstRunState")
}

local ReplaceCallFirstRunPrompt = function() {
    if ("CallFirstRunPrompt" in this) {
        CallFirstRunPromptLoaded <- true
        return
    }
    function CallFirstRunPrompt() {
        return
    }
    RedefinedMessage("CallFirstRunPrompt")
}

//---------------------------------------------------

// Test all VScript functions
ReplaceprintlP2MM()
ReplaceGetPlayerName()
ReplaceGetSteamID()
ReplaceGetPlayerIndex()
ReplaceIsMapValid()
ReplaceGetDeveloperLevelP2MM()
ReplaceSetPhysTypeConvar()
ReplaceSetMaxPortalSeparationConvar()
ReplaceIsDedicatedServer()
ReplaceInitializeEntity()
ReplaceSendToChat()
ReplaceGetGameDirectory()
ReplaceGetLastMap()
ReplaceFirstRunState()
ReplaceCallFirstRunPrompt()

if (IsDedicatedServer()) {
    // Handled in the plugin. This doesn't work with ds
    printlP2MM(1, true, "- Running a dedicated server. Cannot set max separation force for players!")
}

//---------------------------------------------------

// The final say
if (   !printlP2MMLoaded
    && !GetPlayerNameLoaded
    && !GetSteamIDLoaded
    && !GetPlayerIndexLoaded
    && !IsMapValidLoaded
    && !GetDeveloperLevelP2MMLoaded
    && !SetPhysTypeConvarLoaded
    && !SetMaxPortalSeparationConvarLoaded
    && !IsDedicatedServerLoaded
    && !InitializeEntityLoaded
    && !SendToChatLoaded
    && !GetGameDirectoryLoaded
    && !GetLastMapLoaded
    && !FirstRunStateLoaded
    && !CallFirstRunPromptLoaded
    ) {
    // Nothing loaded
    PluginLoaded <- false
} else {
    // Something must have been detected
    PluginLoaded <- true
}